(function () {
    'use strict';

    angular
      .module('authAdminPanel', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize',
          'ngMessages', 'ngAria', 'ngResource', 'ui.router', 'ui.bootstrap', 'ui.tree']);

})();

(function () {
  'use strict';

  angular
    .module('authAdminPanel')
    .config(routerConfig);

  /** @ngInject */
  function routerConfig($stateProvider, $urlRouterProvider, $resourceProvider) {
    $resourceProvider.defaults.stripTrailingSlashes = false;

    $stateProvider
      .state('index', {
        abstract: true,
        url: "/index",
        templateUrl: "app/components/common/content.html"
      })
      .state('index.main', {
        url: "/main",
        templateUrl: "app/components/main/main.html",
        data: {
          pageTitle: 'Dashboard'
        }
      })
      // -->Articles: pages
      .state('index.articles', {
        url: "/articles",
        controller: "articlesListController as vm",
        templateUrl: "app/components/articles/list.html",
        data: {
          pageTitle: 'articles'
        }
      })
      .state('index.articles_new/:articleId', {
        url: "/articles_new/:articleId",
        controller: "articlesNewController as vm",
        templateUrl: "app/components/articles/new.html",
        data: {
          pageTitle: 'articles'
        },
        resolve: {
          articleId: ['$stateParams', function ($stateParams) {
            return $stateParams.articleId;
          }]
        }
      })
      .state('index.articles_dashboard/:articleId', {
        url: "/articles_dashboard/:articleId",
        controller: "articlesDashboardController as vm",
        templateUrl: "app/components/articles/dashboard.html",
        data: {
          pageTitle: 'Products'
        },
        resolve: {
          articleId: ['$stateParams', function ($stateParams) {
            return $stateParams.articleId;
          }]
        }
      })
      // -->Voting station: pages
      .state('index.voting_stations', {
        url: "/voting_stations",
        controller: "votingStationsListController as vm",
        templateUrl: "app/components/voting_stations/list.html",
        data: {
          pageTitle: 'Lista sectii de votare'
        }
      })
      .state('index.voting_station_new', {
        url: "/voting_station_new",
        controller: "votingStationsNewController as vm",
        templateUrl: "app/components/voting_stations/new.html",
        data: {
          pageTitle: 'Adaugare sectie de votare'
        }
      })
      .state('index.voting_station_update/:stationId', {
        url: "/voting_station_update/:stationId",
        controller: "votingStationsUpdateController as vm",
        templateUrl: "app/components/voting_stations/update.html",
        data: {
          pageTitle: 'Modificare sectie de votare'
        },
        resolve: {
          articleId: ['$stateParams', function ($stateParams) {
            return $stateParams.stationId;
          }]
        }
      })
      .state('index.voting_station_dashboard/:stationId', {
        url: "/voting_station_dashboard/:stationId",
        controller: "votingStationsDashboardController as vm",
        templateUrl: "app/components/voting_stations/dashboard.html",
        data: {
          pageTitle: 'Detalii despre sectia de votare'
        },
        resolve: {
          articleId: ['$stateParams', function ($stateParams) {
            return $stateParams.stationId;
          }]
        }
      })
      // -->User: pages
      .state('index.users', {
        url: "/users",
        templateUrl: "app/components/users/list.html",
        controller: "usersListController as vm",
        data: {
          pageTitle: 'Users'
        }
      })
      .state('index.users_new', {
        url: "/users_new",
        templateUrl: "app/components/users/new.html",
        controller: "usersNewController as vm",
        data: {
          pageTitle: 'New User'
        }
      })
      .state('index.users_dashboard/:userId', {
        url: "/users_dashboard/:userId",
        templateUrl: "app/components/users/dashboard.html",
        controller: "usersDashboardController as vm",
        data: {
          pageTitle: 'UserName'
        },
        resolve: {
          userId: ['$stateParams', function ($stateParams) {
            return $stateParams.userId;
          }]
        }
      });

    $urlRouterProvider.otherwise('/index/main');
  }

})();

(function() {
  'use strict';

  angular
    .module('authAdminPanel')
    .run(function ($log, $rootScope, $state) {
          /** @ngInject */
          $rootScope.goto = function(route, opts) {
              $state.go(route,opts);
          }
          $log.debug('runBlock end');
      });
})();

/**
  A service for creating and managing $resource objects for the api 

Default options:
    { 
        'get':    {method:'GET'},
        'save':   {method:'POST'},
        'query':  {method:'GET', isArray:true},
        'remove': {method:'DELETE'},
        'delete': {method:'DELETE'} 
    }; 
 



 */
(function () {
    'use strict';

    //Directive used to set metisMenu and minimalize button
    /*eslint angular/di: [2,"array"]*/
    angular.module('authAdminPanel')
    .service('User', ['$q', function ($q) {
        this.data = {
            name: "Melissa",
            defaults: {
                currency: "GPB"
            },
            lang: "en"
        }
    }])
    .service('resourceManager', ['$q', '$resource', '$log', function ($q, $resource, $log) {

    }])
})();


'use strict';

//Directive used to set metisMenu and minimalize button
angular.module('authAdminPanel')
    .directive('sideNavigation', function ($timeout) {
        return {
            restrict: 'A',
            link: function (scope, element) {
                // Call metsi to build when user signup
                scope.$watch('authentication.user', function() {
                    $timeout(function() {
                        element.metisMenu();
                    });
                });

            }
        };
    })
    .directive('minimalizaSidebar', function ($timeout) {
        return {
            restrict: 'A',
            template: '<a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="" ng-click="minimalize()"><i class="fa fa-bars"></i></a>',
            controller: function ($scope) {
                $scope.minimalize = function () {
                    angular.element('body').toggleClass('mini-navbar');
                    if (!angular.element('body').hasClass('mini-navbar') || angular.element('body').hasClass('body-small')) {
                        // Hide menu in order to smoothly turn on when maximize menu
                        angular.element('#side-menu').hide();
                        // For smoothly turn on menu
                        $timeout(function () {
                            angular.element('#side-menu').fadeIn(400);
                        }, 200);
                    } else {
                        // Remove all inline style from jquery fadeIn function to reset menu state
                        angular.element('#side-menu').removeAttr('style');
                    }
                };
            }
        };
    });



/**
 * INSPINIA - Responsive Admin Theme
 * 2.5
 *
 * Custom scripts
 */

angular.element(document).ready(function ($timeout) {


  // Full height of sidebar
  function fix_height() {
    var heightWithoutNavbar = angular.element("body > #wrapper").height() - 61;
    angular.element(".sidebard-panel").css("min-height", heightWithoutNavbar + "px");

    var navbarHeigh = angular.element('nav.navbar-default').height();
    var wrapperHeigh = angular.element('#page-wrapper').height();

    if(navbarHeigh > wrapperHeigh){
      angular.element('#page-wrapper').css("min-height", navbarHeigh + "px");
    }

    if(navbarHeigh < wrapperHeigh){
      angular.element('#page-wrapper').css("min-height", angular.element(window).height()  + "px");
    }

    if (angular.element('body').hasClass('fixed-nav')) {
      if (navbarHeigh > wrapperHeigh) {
        angular.element('#page-wrapper').css("min-height", navbarHeigh - 60 + "px");
      } else {
        angular.element('#page-wrapper').css("min-height", angular.element(window).height() - 60 + "px");
      }
    }

  }

  //angular.element(window).bind("load resize scroll", function() {
  //  if(!angular.element("body").hasClass('body-small')) {
  //    fix_height();
  //  }
  //});

  // Move right sidebar top after scroll
  //angular.element(window).scroll(function(){
  //  if (angular.element(window).scrollTop() > 0 && !angular.element('body').hasClass('fixed-nav') ) {
  //    angular.element('#right-sidebar').addClass('sidebar-top');
  //  } else {
  //    angular.element('#right-sidebar').removeClass('sidebar-top');
  //  }
  //});

  //$timeout(function(){
  //  fix_height();
  //});

  // Minimalize menu when screen is less than 768px
  //angular.element(window).bind("load resize", function() {
  //  if (angular.element(document).width() < 769) {
  //    angular.element('body').addClass('body-small')
  //  } else {
  //    angular.element('body').removeClass('body-small')
  //  }
  //})

});

(function() {
  'use strict';
/*eslint angular/di: [2,"array"]*/

angular.module('authAdminPanel')
.controller('articlesDashboardController', ['resourceManager', '$scope', '$rootScope', '$log', 'articleId', 
    function (resourceManager, $scope, $rootScope, $log, articleId) { 
        var vm = this,
            vmLocal = {};
        
        vm.data = {}

        $log.info(articleId); 
        
        // TODO:: fetch the list of companies from the server and display here
        $scope.$on("$destroy", function() {
            vmLocal = null;
        })
    }]);
})();

(function() {
    'use strict';
/*eslint angular/di: [2,"array"]*/

angular.module('authAdminPanel')
.controller('articlesListController', ['$scope', 'resourceManager', '$log', '$rootScope', 'User', 
    function($scope, resourceManager, $log, $rootScope, User) {
    var vm = this,
        vmLocal = {};
    vm.data = []



    $scope.$on("$destroy", function() {
        vmLocal = null;
    })
}]);
})();
(function() {
    'use strict';
/*eslint angular/di: [2,"array"]*/
angular.module('authAdminPanel')
.controller('articlesNewController', ['resourceManager', '$rootScope', '$log', '$scope', 'articleId', 'User', 
    function(resourceManager, $rootScope, $log, $scope, articleId, User) {
    var vm = this,
        vmLocal = {};

    // -->End
    $scope.$on('$destroy', function() {
        vm.status = {};
        vmLocal = null;
    })
}]);
})();
/*

use as attribute
Example:

<button class="btn-danger btn btn-xs " request-confirmation="Sunteti sigur?" confirmed-action="vm.remove(id)" canceld-action="vm.cancel()"> Sterge</button>

*/

(function () {
  'use strict';

  angular
    .module('authAdminPanel')
    .directive('requestConfirmation', requestConfirm);

  /* @ngInject */
  function requestConfirm($uibModal) {
    var directive = {
      restrict: 'A',
      link: linkFunc,
    };

    return directive;

    function linkFunc(scope, element, attr, ctrl) {
      var confirmQuestion = attr.requestConfirmation || "Sunteți sigur de aceasta acțiune?";
      var confirmedAction = attr.confirmedAction;
      var canceldAction = attr.canceldAction;

      element.bind('click', function (event) {

        var modalInstance = $uibModal.open({
          ariaLabelledBy: 'modal-title',
          ariaDescribedBy: 'modal-body',
          template: '<div class="modal-header"><h3 class="modal-title" id="modal-title">{{$ctrl.confirmQuestion}}</h3></div><div class="modal-footer">	<button class="btn btn-danger" type="button" ng-click="$ctrl.confirm()">Confirmă</button>	<button class="btn btn-warning" type="button" ng-click="$ctrl.cancel()">Anulează</button></div>',
          size: 'sm',
          controllerAs: '$ctrl',
          resolve: {
            confirmQuestion: function () {
              return confirmQuestion;
            }
          },
          controller: function ($uibModalInstance, confirmQuestion) {
            var $ctrl = this;
            $ctrl.confirmQuestion = confirmQuestion;
            $ctrl.confirm = function () {
              $uibModalInstance.close();
            };
            $ctrl.cancel = function () {
              $uibModalInstance.dismiss();
            };
          }
        });

        modalInstance.result.then(function (selectedItem) {
          if (confirmedAction) {
            scope.$eval(confirmedAction)
          }
          scope.$eval()
        }, function () {
          if (canceldAction) {
            scope.$eval(canceldAction)
          }
        });
      });
    }
  }

})();

'use strict';

angular.module('authAdminPanel')
  .controller('MainController', function () { 

    var vm = this;

    vm.userName = 'Example user';
    vm.helloText = 'Welcome in Admin Auth Panel';
    vm.descriptionText = 'This is a Angular web-app';

  });

(function() {
  'use strict';
/*eslint angular/di: [2,"array"]*/

angular.module('authAdminPanel')
.controller('usersDashboardController', ['$scope', function ($scope) { 
    var vm = this;

    // TODO:: fetch the list of companies from the server and display here
}]);
})();

(function() {
  'use strict';

/*eslint angular/di: [2,"array"]*/
angular.module('authAdminPanel')
.controller('usersListController', ['resourceManager', '$log', function (resourceManager, $log) { 
    var vm = this,
        vmLocal = {};
    

    // TODO:: fetch the list of companies from the server and display here
}]);
})();

(function() {
  'use strict';
/*eslint angular/di: [2,"array"]*/
angular.module('authAdminPanel')
.controller('usersNewController', ['resourceManager', '$state', function (resourceManager, $state) { 
    var vm = this,
        vmLocal = {};

    
}]);
})();

(function () {
  'use strict';
  /*eslint angular/di: [2,"array"]*/

  angular.module('authAdminPanel')
    .controller('votingStationsDashboardController', ['resourceManager', '$scope', '$rootScope', '$log', 'articleId',
      function (resourceManager, $scope, $rootScope, $log, articleId) {
        var vm = this,
          vmLocal = {};


        // TODO:: fetch the list of companies from the server and display here
        $scope.$on("$destroy", function () {
          vmLocal = null;
        })
      }
    ]);
})();

(function() {
    'use strict';
    /*eslint angular/di: [2,"array"]*/

    angular.module('authAdminPanel')
        .controller('votingStationsListController', ["VotingStations", "$state", "$scope", '$log',
            function(VotingStations, $state, $scope, $log) {
                var vm = this,
                    vmLocal = {};

                //-->Init: vars 
                vm.query = {};
                vm.pagination = {
                    currentPage: 1,
                    itemsPerPage: 7,
                    totalItems: 150,
                    maxDisplayedPages: 5
                };
                vm.sortBy = 'crt';
                vm.sortAscending = true;

                // -->Declare: functions
                vm.delete = function() {};
                vm.search = function() {
                    VotingStations.query({
                            q: vm.query, // {name: "test search"}
                            currentPage: vm.pagination.currentPage, // 1
                            itemsPerPage: vm.pagination.itemsPerPage, // 50
                            sortBy: vm.sortBy, // 'name'
                            sortAscending: vm.sortAscending // true  OR false
                        }).$promise
                        .then(function(result) {
                            vm.items = result.list;
                            vm.pagination.totalItems = result.totalItems
                        }).catch(function(err) {
                            $log.error(err);
                            vm.error = err;
                        });
                };
                vm.sort = function(sortBy) {
                    vm.sortBy = sortBy;
                    vm.sortAscending = !vm.sortAscending;
                    vm.search()
                };

                // -->INIT
                vm.search();


                $scope.$on("$destroy", function() {
                    vm.items = [];
                })
            }
        ]);
})();
(function () {
  'use strict';
  /*eslint angular/di: [2,"array"]*/
  angular.module('authAdminPanel')
    .controller('votingStationsNewController', ["VotingStations", "$state", "$scope",

      function (VotingStations, $state, $scope) {
        var vm = this;
        vm.create = create;
        vm.data = {
          isEnabled: true,
          priority: 100
        };

        function create() {
          var votingStations = new VotingStations()
          votingStations.data = vm.data
          votingStations.$save(votingStations)

          votingStations.$promise
            .then(function (result) {
              $state.go('index.voting_stations');
            }).catch(function (err) {
              vm.error = err;
              console.error(err);
            });
        }

        // -->End
        $scope.$on('$destroy', function () {
          vm.data = {};
        })
      }
    ]);
})();

(function () {
  'use strict';
  /*eslint angular/di: [2,"array"]*/
  angular.module('authAdminPanel')
    .controller('votingStationsUpdateController', ['resourceManager', '$rootScope', '$log', '$scope', 'articleId', 'User',
      function (resourceManager, $rootScope, $log, $scope, articleId, User) {
        var vm = this,
          vmLocal = {};

        // -->End
        $scope.$on('$destroy', function () {
          vm.status = {};
          vmLocal = null;
        })
      }
    ]);
})();

(function () {
  'use strict';

  angular
    .module('authAdminPanel')
    .factory('VotingStations', votingStations);

  votingStations.$inject = ['$resource', '$log'];

  /* @ngInject */
  function votingStations($resource, $log) {
    return $resource('/api/votingStations/:id', {
      id: '@_id'
    }, {
      update: {
        method: 'PUT' // this method issues a PUT request
      }
    });
  }
})();
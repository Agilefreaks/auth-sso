(function() {
  'use strict';
/*eslint angular/di: [2,"array"]*/

angular.module('authAdminPanel')
.controller('articlesDashboardController', ['resourceManager', '$scope', '$rootScope', '$log', 'articleId', 
    function (resourceManager, $scope, $rootScope, $log, articleId) { 
        var vm = this,
            vmLocal = {};
        
        vm.data = {}

        $log.info(articleId); 
        
        // TODO:: fetch the list of companies from the server and display here
        $scope.$on("$destroy", function() {
            vmLocal = null;
        })
    }]);
})();

(function() {
    'use strict';
/*eslint angular/di: [2,"array"]*/

angular.module('authAdminPanel')
.controller('articlesListController', ['$scope', 'resourceManager', '$log', '$rootScope', 'User', 
    function($scope, resourceManager, $log, $rootScope, User) {
    var vm = this,
        vmLocal = {};
    vm.data = []



    $scope.$on("$destroy", function() {
        vmLocal = null;
    })
}]);
})();
(function () {
    'use strict';
    /*eslint angular/di: [2,"array"]*/
    angular.module('authAdminPanel')
    .controller('articlesNewController', ['resourceManager', '$rootScope', '$log', '$scope', 'articleId', 'User',
        function (resourceManager, $rootScope, $log, $scope, articleId, User) {
            var vm = this,
                vmLocal = {};

            // -->End
            $scope.$on('$destroy', function () {
                vm.status = {};
                vmLocal = null;
            })
        }]);
})();
/*

use as attribute
Example:

<button class="btn-danger btn btn-xs " request-confirmation="Sunteti sigur?" confirmed-action="vm.remove(id)" canceld-action="vm.cancel()"> Sterge</button>

*/

(function () {
  'use strict';

  angular
    .module('authAdminPanel')
    .directive('requestConfirmation', requestConfirm);

  /* @ngInject */
  function requestConfirm($uibModal) {
    var directive = {
      restrict: 'A',
      link: linkFunc,
    };

    return directive;

    function linkFunc(scope, element, attr, ctrl) {
      var confirmQuestion = attr.requestConfirmation || "Sunteți sigur de aceasta acțiune?";
      var confirmedAction = attr.confirmedAction;
      var canceldAction = attr.canceldAction;

      element.bind('click', function (event) {

        var modalInstance = $uibModal.open({
          ariaLabelledBy: 'modal-title',
          ariaDescribedBy: 'modal-body',
          template: '<div class="modal-header"><h3 class="modal-title" id="modal-title">{{$ctrl.confirmQuestion}}</h3></div><div class="modal-footer">	<button class="btn btn-danger" type="button" ng-click="$ctrl.confirm()">Confirmă</button>	<button class="btn btn-warning" type="button" ng-click="$ctrl.cancel()">Anulează</button></div>',
          size: 'sm',
          controllerAs: '$ctrl',
          resolve: {
            confirmQuestion: function () {
              return confirmQuestion;
            }
          },
          controller: function ($uibModalInstance, confirmQuestion) {
            var $ctrl = this;
            $ctrl.confirmQuestion = confirmQuestion;
            $ctrl.confirm = function () {
              $uibModalInstance.close();
            };
            $ctrl.cancel = function () {
              $uibModalInstance.dismiss();
            };
          }
        });

        modalInstance.result.then(function (selectedItem) {
          if (confirmedAction) {
            scope.$eval(confirmedAction)
          }
          scope.$eval()
        }, function () {
          if (canceldAction) {
            scope.$eval(canceldAction)
          }
        });
      });
    }
  }

})();

'use strict';

angular.module('authAdminPanel')
  .controller('MainController', function () { 

    var vm = this;

    vm.userName = 'Example user';
    vm.helloText = 'Welcome in Admin Auth Panel';
    vm.descriptionText = 'This is a Angular web-app';

  });

(function () {
    'use strict';
    /*eslint angular/di: [2,"array"]*/
    angular
        .module('authAdminPanel')
        .controller('SamplesEditController', ["Sample", "$state", "$scope", 'status', 'id',

        function (Sample, $state, $scope, status, id) {
            var vm = this,
                vmLocal = {};

            vm.data = {
                isComplete: false
            };
            vm.status = status;

            vm.id = id;

            var create = function () {
                Sample
                    .save(vm.data).$promise
                    .then(function (result) {
                        $state.go('index.samples');
                    }).catch(function (err) {
                        vm.error = err;
                        console.error(err);
                    });
            };

            var update = function () {
                Sample
                    .update({ id: vm.id }, vm.data).$promise
                    .then(function (result) {
                        $state.go('index.samples');
                    }).catch(function (err) {
                        vm.error = err;
                        console.error(err);
                    });
            }

            vm.save = function () {
                if (vm.status.edit && vm.id) {
                    update();
                } else {
                    create();
                }
            };

            vm.init = function () {
                Sample.get({ id: vm.id }).$promise
                    .then(function (result) {
                        vm.data = result;
                    }).catch(function (err) {
                        vm.error = err;
                        console.error(err);
                    });
            };

            if (vm.status.edit) {
                vm.init();
            };



            // -->End
            $scope.$on('$destroy', function () {
                vm.data = {};
                vmLocal = null;
            });
        }
        ]);
})();

(function () {
    'use strict';
    /*eslint angular/di: [2,"array"]*/
    angular
        .module('authAdminPanel')
        .controller('SamplesListController', ['Sample', '$rootScope', '$log', '$scope', 'User',
            function (Sample, $rootScope, $log, $scope, User) {
                var vm = this,
                    vmLocal = {};

                vm.pagination = {
                    currentPage: 1,
                    itemsPerPage: 7,
                    totalItems: 150,
                    maxDisplayedPages: 5
                };
                vm.sortBy = 'name';
                vm.sortAscending = true;

                vm.search = function () {
                    Sample.filter({
                        q: vm.query, // {name: "test search"}
                        currentPage: vm.pagination.currentPage, // 1
                        itemsPerPage: vm.pagination.itemsPerPage, // 50
                        sortBy: vm.sortBy, // 'name'
                        sortAscending: vm.sortAscending // true  OR false
                    }).$promise
                        .then(function (result) {
                            vm.items = result.list;
                            vm.pagination.totalItems = result.totalItems
                        }).catch(function (err) {
                            $log.error(err);
                            vm.error = err;
                        });
                };

                vm.sort = function (sortBy) {
                    vm.sortBy = sortBy;
                    vm.sortAscending = !vm.sortAscending;
                    vm.search();
                };

                vm.gotoEdit = function (id) {
                    $rootScope.goto('index.samples_edit', { id: id });
                };

                vm.delete = function (id) {
                    Sample.delete({ id: id }).$promise
                        .then(function (response) {
                            vm.search();
                        }).catch(function (err) {
                            $log.error(err);
                            vm.error = err;
                        });
                };

                vm.search();


                // -->End
                $scope.$on('$destroy', function () {
                    vmLocal = null;
                })
            }]);
})();
(function () {
    'use strict';

    angular
      .module('authAdminPanel')
      .factory('Sample', ['$q', '$resource', '$log', function ($q, $resource, $log) {
          return $resource('/api/sample/:id', { id: '@id' }, {
              filter: { method: 'GET' }, 
              update: { method: 'PUT'}
          });
      }]);
})();


(function() {
  'use strict';
/*eslint angular/di: [2,"array"]*/

angular.module('authAdminPanel')
.controller('usersDashboardController', ['$scope', function ($scope) { 
    var vm = this;

    // TODO:: fetch the list of companies from the server and display here
}]);
})();

(function() {
  'use strict';

/*eslint angular/di: [2,"array"]*/
angular.module('authAdminPanel')
.controller('usersListController', ['resourceManager', '$log', function (resourceManager, $log) { 
    var vm = this,
        vmLocal = {};
    

    // TODO:: fetch the list of companies from the server and display here
}]);
})();

(function() {
  'use strict';
/*eslint angular/di: [2,"array"]*/
angular.module('authAdminPanel')
.controller('usersNewController', ['resourceManager', '$state', function (resourceManager, $state) { 
    var vm = this,
        vmLocal = {};

    
}]);
})();

(function () {
  'use strict';
  /*eslint angular/di: [2,"array"]*/

  angular.module('authAdminPanel')
    .controller('votingStationsDashboardController', ['resourceManager', '$scope', '$rootScope', '$log', 'articleId',
      function (resourceManager, $scope, $rootScope, $log, articleId) {
        var vm = this,
          vmLocal = {};


        // TODO:: fetch the list of companies from the server and display here
        $scope.$on("$destroy", function () {
          vmLocal = null;
        })
      }
    ]);
})();

(function() {
    'use strict';
    /*eslint angular/di: [2,"array"]*/

    angular.module('authAdminPanel')
        .controller('votingStationsListController', ["VotingStations", "$state", "$scope", '$log',
            function(VotingStations, $state, $scope, $log) {
                var vm = this,
                    vmLocal = {};

                //-->Init: vars 
                vm.query = {};
                vm.pagination = {
                    currentPage: 1,
                    itemsPerPage: 7,
                    totalItems: 150,
                    maxDisplayedPages: 5
                };
                vm.sortBy = 'crt';
                vm.sortAscending = true;

                // -->Declare: functions
                vm.delete = function() {};
                vm.search = function() {
                    VotingStations.query({
                            q: vm.query, // {name: "test search"}
                            currentPage: vm.pagination.currentPage, // 1
                            itemsPerPage: vm.pagination.itemsPerPage, // 50
                            sortBy: vm.sortBy, // 'name'
                            sortAscending: vm.sortAscending // true  OR false
                        }).$promise
                        .then(function(result) {
                            vm.items = result.list;
                            vm.pagination.totalItems = result.totalItems
                        }).catch(function(err) {
                            $log.error(err);
                            vm.error = err;
                        });
                };
                vm.sort = function(sortBy) {
                    vm.sortBy = sortBy;
                    vm.sortAscending = !vm.sortAscending;
                    vm.search();
                };

                // -->INIT
                vm.search();


                $scope.$on("$destroy", function() {
                    vm.items = [];
                })
            }
        ]);
})();
(function () {
  'use strict';
  /*eslint angular/di: [2,"array"]*/
  angular.module('authAdminPanel')
    .controller('votingStationsNewController', ["VotingStations", "$state", "$scope",

      function (VotingStations, $state, $scope) {
        var vm = this;
        vm.create = create;
        vm.data = {
          isEnabled: true,
          priority: 100
        };

        function create() {
          var votingStations = new VotingStations()
          votingStations.data = vm.data
          votingStations.$save(votingStations)

          votingStations.$promise
            .then(function (result) {
              $state.go('index.voting_stations');
            }).catch(function (err) {
              vm.error = err;
              console.error(err);
            });
        }

        // -->End
        $scope.$on('$destroy', function () {
          vm.data = {};
        })
      }
    ]);
})();

(function () {
  'use strict';
  /*eslint angular/di: [2,"array"]*/
  angular.module('authAdminPanel')
    .controller('votingStationsUpdateController', ['resourceManager', '$rootScope', '$log', '$scope', 'articleId', 'User',
      function (resourceManager, $rootScope, $log, $scope, articleId, User) {
        var vm = this,
          vmLocal = {};

        // -->End
        $scope.$on('$destroy', function () {
           
          vm.status = {};
          vmLocal = null;
        })
      }
    ]);
})();

(function () {
  'use strict';

  angular
    .module('authAdminPanel')
    .factory('VotingStations', votingStations);

  votingStations.$inject = ['$resource', '$log'];

  /* @ngInject */
  function votingStations($resource, $log) {
    return $resource('/api/votingStations/:id', {
      id: '@_id'
    }, {
      update: {
        method: 'PUT' // this method issues a PUT request
      }
    });
  }
})();